{"ast":null,"code":"const enFruits = require('./langs/en.json');\n\nconst esFruits = require('./langs/es.json');\n\nconst jaFruits = require('./langs/ja.json');\n\nconst ptFruits = require('./langs/pt.json');\n\nconst getRandomInt = max => Math.floor(Math.random() * Math.floor(max));\n\nconst filterMaxWords = (fruits, maxWords) => {\n  if (!Number.isInteger(maxWords)) throw new Error('The value of maxWords is incorrect.'); // If `maxWords` is 1, no space is allowed in the string.\n\n  const allowSpaceCount = maxWords - 1;\n  const filteredFruits = fruits.filter(f => {\n    return f.split(' ').length - 1 <= allowSpaceCount;\n  });\n  return filteredFruits;\n};\n/**\n * Get Random Fruit Name\n * @param {string} language - choose  language of random fruit, default is english: 'en', function ue [ISO-639-1 codes](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes)\n * @returns {string} return a string with fruits name, example: 'Apple'\n */\n\n\nconst getRandomFruitsName = (language = 'en', option = {}) => {\n  if (!['en', 'es', 'ja', 'pt'].includes(language)) {\n    throw new Error('Selected language is invalid.');\n  }\n\n  const optionKeys = Object.keys(option);\n\n  if (!!optionKeys.length && !optionKeys.includes('maxWords')) {\n    throw new Error('Specified option is invalid.');\n  }\n\n  let fruits = enFruits.fruits;\n  if (language === 'es') fruits = esFruits.fruits;\n  if (language === 'ja') fruits = jaFruits.fruits;\n  if (language === 'pt') fruits = ptFruits.fruits;\n  if ('maxWords' in option) fruits = filterMaxWords(fruits, option.maxWords);\n  return fruits[getRandomInt(fruits.length)];\n};\n\nmodule.exports = getRandomFruitsName;","map":{"version":3,"sources":["/Users/helenzhang/Desktop/Development/node_modules/random-fruits-name/main.js"],"names":["enFruits","require","esFruits","jaFruits","ptFruits","getRandomInt","max","Math","floor","random","filterMaxWords","fruits","maxWords","Number","isInteger","Error","allowSpaceCount","filteredFruits","filter","f","split","length","getRandomFruitsName","language","option","includes","optionKeys","Object","keys","module","exports"],"mappings":"AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,iBAAD,CAAxB;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,iBAAD,CAAxB;;AACA,MAAME,QAAQ,GAAGF,OAAO,CAAC,iBAAD,CAAxB;;AACA,MAAMG,QAAQ,GAAGH,OAAO,CAAC,iBAAD,CAAxB;;AAEA,MAAMI,YAAY,GAAIC,GAAD,IAASC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBF,IAAI,CAACC,KAAL,CAAWF,GAAX,CAA3B,CAA9B;;AAEA,MAAMI,cAAc,GAAG,CAACC,MAAD,EAASC,QAAT,KAAsB;AAC3C,MAAI,CAACC,MAAM,CAACC,SAAP,CAAiBF,QAAjB,CAAL,EACE,MAAM,IAAIG,KAAJ,CAAU,qCAAV,CAAN,CAFyC,CAI3C;;AACA,QAAMC,eAAe,GAAGJ,QAAQ,GAAG,CAAnC;AAEA,QAAMK,cAAc,GAAGN,MAAM,CAACO,MAAP,CAAeC,CAAD,IAAO;AAC1C,WAAOA,CAAC,CAACC,KAAF,CAAQ,GAAR,EAAaC,MAAb,GAAsB,CAAtB,IAA2BL,eAAlC;AACD,GAFsB,CAAvB;AAGA,SAAOC,cAAP;AACD,CAXD;AAaA;AACA;AACA;AACA;AACA;;;AACA,MAAMK,mBAAmB,GAAG,CAACC,QAAQ,GAAG,IAAZ,EAAkBC,MAAM,GAAG,EAA3B,KAAkC;AAC5D,MAAI,CAAC,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyBC,QAAzB,CAAkCF,QAAlC,CAAL,EAAkD;AAChD,UAAM,IAAIR,KAAJ,CAAU,+BAAV,CAAN;AACD;;AAED,QAAMW,UAAU,GAAGC,MAAM,CAACC,IAAP,CAAYJ,MAAZ,CAAnB;;AACA,MAAI,CAAC,CAACE,UAAU,CAACL,MAAb,IAAuB,CAACK,UAAU,CAACD,QAAX,CAAoB,UAApB,CAA5B,EAA6D;AAC3D,UAAM,IAAIV,KAAJ,CAAU,8BAAV,CAAN;AACD;;AAED,MAAIJ,MAAM,GAAGX,QAAQ,CAACW,MAAtB;AACA,MAAIY,QAAQ,KAAK,IAAjB,EAAuBZ,MAAM,GAAGT,QAAQ,CAACS,MAAlB;AACvB,MAAIY,QAAQ,KAAK,IAAjB,EAAuBZ,MAAM,GAAGR,QAAQ,CAACQ,MAAlB;AACvB,MAAIY,QAAQ,KAAK,IAAjB,EAAuBZ,MAAM,GAAGP,QAAQ,CAACO,MAAlB;AAEvB,MAAI,cAAca,MAAlB,EAA0Bb,MAAM,GAAGD,cAAc,CAACC,MAAD,EAASa,MAAM,CAACZ,QAAhB,CAAvB;AAC1B,SAAOD,MAAM,CAACN,YAAY,CAACM,MAAM,CAACU,MAAR,CAAb,CAAb;AACD,CAjBD;;AAmBAQ,MAAM,CAACC,OAAP,GAAiBR,mBAAjB","sourcesContent":["const enFruits = require('./langs/en.json')\nconst esFruits = require('./langs/es.json')\nconst jaFruits = require('./langs/ja.json')\nconst ptFruits = require('./langs/pt.json')\n\nconst getRandomInt = (max) => Math.floor(Math.random() * Math.floor(max))\n\nconst filterMaxWords = (fruits, maxWords) => {\n  if (!Number.isInteger(maxWords))\n    throw new Error('The value of maxWords is incorrect.')\n\n  // If `maxWords` is 1, no space is allowed in the string.\n  const allowSpaceCount = maxWords - 1\n\n  const filteredFruits = fruits.filter((f) => {\n    return f.split(' ').length - 1 <= allowSpaceCount\n  })\n  return filteredFruits\n}\n\n/**\n * Get Random Fruit Name\n * @param {string} language - choose  language of random fruit, default is english: 'en', function ue [ISO-639-1 codes](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes)\n * @returns {string} return a string with fruits name, example: 'Apple'\n */\nconst getRandomFruitsName = (language = 'en', option = {}) => {\n  if (!['en', 'es', 'ja', 'pt'].includes(language)) {\n    throw new Error('Selected language is invalid.')\n  }\n\n  const optionKeys = Object.keys(option)\n  if (!!optionKeys.length && !optionKeys.includes('maxWords')) {\n    throw new Error('Specified option is invalid.')\n  }\n\n  let fruits = enFruits.fruits\n  if (language === 'es') fruits = esFruits.fruits\n  if (language === 'ja') fruits = jaFruits.fruits\n  if (language === 'pt') fruits = ptFruits.fruits\n\n  if ('maxWords' in option) fruits = filterMaxWords(fruits, option.maxWords)\n  return fruits[getRandomInt(fruits.length)]\n}\n\nmodule.exports = getRandomFruitsName\n"]},"metadata":{},"sourceType":"script"}