{"ast":null,"code":"/**\n * @param {String} str\n * @return {String}\n */\nfunction filterNumbers(str) {\n  return str.replace(/[^\\d]/g, '');\n}\n/**\n * @param {String} str\n * @return {String}\n */\n\n\nfunction filterNumbersDotsAndCommas(str) {\n  return str.replace(/[^\\d.,]/g, '').replace(/[.,]$/, '');\n}\n\nfunction getDecimalSymbol(str) {\n  var strFiltered = filterNumbersDotsAndCommas(str);\n  var endWithZero = strFiltered[strFiltered.length - 1] === '0'; // For each character starting from the end...\n\n  for (var i = strFiltered.length; i > 0; i--) {\n    // If the last character is a \"0\" and the decimal position > 3, no decimal\n    if (strFiltered.length - i + 1 > 3 && endWithZero) {\n      return;\n    }\n\n    var currentChar = strFiltered[i - 1];\n\n    if ([',', '.'].indexOf(currentChar) !== -1) {\n      return currentChar;\n    }\n  }\n} //\n// API\n//\n\n/**\n * @param {Number|String} input\n * @return {Number}\n */\n\n\nfunction parsePrice(input) {\n  var str = String(input);\n  var decimalPart = '00';\n  var decimalSymbol = getDecimalSymbol(str);\n\n  if (decimalSymbol) {\n    decimalPart = str.split(decimalSymbol)[1];\n  }\n\n  var integerPart = str.split(decimalSymbol)[0];\n  return Number(filterNumbers(integerPart) + '.' + filterNumbers(decimalPart));\n}\n\nmodule.exports = parsePrice;","map":{"version":3,"sources":["/Users/helenzhang/node_modules/parse-price/src/index.js"],"names":["filterNumbers","str","replace","filterNumbersDotsAndCommas","getDecimalSymbol","strFiltered","endWithZero","length","i","currentChar","indexOf","parsePrice","input","String","decimalPart","decimalSymbol","split","integerPart","Number","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,aAAT,CAAwBC,GAAxB,EAA6B;AAC3B,SAAOA,GAAG,CAACC,OAAJ,CAAY,QAAZ,EAAsB,EAAtB,CAAP;AACD;AAED;AACA;AACA;AACA;;;AACA,SAASC,0BAAT,CAAqCF,GAArC,EAA0C;AACxC,SAAOA,GAAG,CACPC,OADI,CACI,UADJ,EACgB,EADhB,EAEJA,OAFI,CAEI,OAFJ,EAEa,EAFb,CAAP;AAGD;;AAED,SAASE,gBAAT,CAA2BH,GAA3B,EAAgC;AAC9B,MAAII,WAAW,GAAGF,0BAA0B,CAACF,GAAD,CAA5C;AACA,MAAIK,WAAW,GAAGD,WAAW,CAACA,WAAW,CAACE,MAAZ,GAAqB,CAAtB,CAAX,KAAwC,GAA1D,CAF8B,CAI9B;;AACA,OAAK,IAAIC,CAAC,GAAGH,WAAW,CAACE,MAAzB,EAAiCC,CAAC,GAAG,CAArC,EAAwCA,CAAC,EAAzC,EAA6C;AAC3C;AACA,QAAMH,WAAW,CAACE,MAAZ,GAAqBC,CAArB,GAAyB,CAA1B,GAA+B,CAAhC,IAAsCF,WAA1C,EAAuD;AACrD;AACD;;AAED,QAAIG,WAAW,GAAGJ,WAAW,CAACG,CAAC,GAAG,CAAL,CAA7B;;AAEA,QAAI,CAAC,GAAD,EAAM,GAAN,EAAWE,OAAX,CAAmBD,WAAnB,MAAoC,CAAC,CAAzC,EAA4C;AAC1C,aAAOA,WAAP;AACD;AACF;AACF,C,CAED;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AACA,SAASE,UAAT,CAAqBC,KAArB,EAA4B;AAC1B,MAAIX,GAAG,GAAGY,MAAM,CAACD,KAAD,CAAhB;AAEA,MAAIE,WAAW,GAAG,IAAlB;AACA,MAAIC,aAAa,GAAGX,gBAAgB,CAACH,GAAD,CAApC;;AAEA,MAAIc,aAAJ,EAAmB;AACjBD,IAAAA,WAAW,GAAGb,GAAG,CAACe,KAAJ,CAAUD,aAAV,EAAyB,CAAzB,CAAd;AACD;;AAED,MAAIE,WAAW,GAAGhB,GAAG,CAACe,KAAJ,CAAUD,aAAV,EAAyB,CAAzB,CAAlB;AAEA,SAAOG,MAAM,CAAClB,aAAa,CAACiB,WAAD,CAAb,GAA6B,GAA7B,GAAmCjB,aAAa,CAACc,WAAD,CAAjD,CAAb;AACD;;AAEDK,MAAM,CAACC,OAAP,GAAiBT,UAAjB","sourcesContent":["/**\n * @param {String} str\n * @return {String}\n */\nfunction filterNumbers (str) {\n  return str.replace(/[^\\d]/g, '')\n}\n\n/**\n * @param {String} str\n * @return {String}\n */\nfunction filterNumbersDotsAndCommas (str) {\n  return str\n    .replace(/[^\\d.,]/g, '')\n    .replace(/[.,]$/, '')\n}\n\nfunction getDecimalSymbol (str) {\n  var strFiltered = filterNumbersDotsAndCommas(str)\n  var endWithZero = strFiltered[strFiltered.length - 1] === '0'\n\n  // For each character starting from the end...\n  for (var i = strFiltered.length; i > 0; i--) {\n    // If the last character is a \"0\" and the decimal position > 3, no decimal\n    if (((strFiltered.length - i + 1) > 3) && endWithZero) {\n      return\n    }\n\n    var currentChar = strFiltered[i - 1]\n\n    if ([',', '.'].indexOf(currentChar) !== -1) {\n      return currentChar\n    }\n  }\n}\n\n//\n// API\n//\n\n/**\n * @param {Number|String} input\n * @return {Number}\n */\nfunction parsePrice (input) {\n  var str = String(input)\n\n  var decimalPart = '00'\n  var decimalSymbol = getDecimalSymbol(str)\n\n  if (decimalSymbol) {\n    decimalPart = str.split(decimalSymbol)[1]\n  }\n\n  var integerPart = str.split(decimalSymbol)[0]\n\n  return Number(filterNumbers(integerPart) + '.' + filterNumbers(decimalPart))\n}\n\nmodule.exports = parsePrice\n"]},"metadata":{},"sourceType":"script"}